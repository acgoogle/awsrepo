{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Jenkins 2: highly available Jenkins master, a cloudonaut.io template",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Parent Stacks"
                    },
                    "Parameters": [
                        "ParentVPCStack",
                        "ParentSSHBastionStack",
                        "ParentAuthProxyStack",
                        "ParentAlertStack"
                    ]
                },
                {
                    "Label": {
                        "default": "Jenkins Parameters"
                    },
                    "Parameters": [
                        "JenkinsVersion"
                    ]
                },
                {
                    "Label": {
                        "default": "EC2 Parameters"
                    },
                    "Parameters": [
                        "KeyName",
                        "IAMUserSSHAccess",
                        "NewRelicLicenseKey"
                    ]
                },
                {
                    "Label": {
                        "default": "Master Parameters"
                    },
                    "Parameters": [
                        "MasterSubnetsReach",
                        "MasterELBScheme",
                        "MasterInstanceType",
                        "MasterAdminPassword",
                        "MasterLogsRetentionInDays"
                    ]
                }
            ]
        }
    },
    "Parameters": {
        "ParentVPCStack": {
            "Description": "Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template.",
            "Type": "String"
        },
        "ParentSSHBastionStack": {
            "Description": "Optional but recommended stack name of parent SSH bastion host/instance stack based on vpc/vpc-ssh-bastion.yaml template.",
            "Type": "String",
            "Default": ""
        },
        "ParentAuthProxyStack": {
            "Description": "Optional stack name of parent auth proxy stack based on security/auth-proxy-*.yaml template.",
            "Type": "String",
            "Default": ""
        },
        "ParentAlertStack": {
            "Description": "Optional but recommended stack name of parent alert stack based on operations/alert.yaml template.",
            "Type": "String",
            "Default": ""
        },
        "KeyName": {
            "Description": "Optional key pair of the ec2-user to establish a SSH connection to the Jenkins master.",
            "Type": "String",
            "Default": ""
        },
        "IAMUserSSHAccess": {
            "Description": "Synchronize public keys of IAM users to enable personalized SSH access (Doc: https://cloudonaut.io/manage-aws-ec2-ssh-access-with-iam/).",
            "Type": "String",
            "Default": false,
            "AllowedValues": [
                true,
                false
            ]
        },
        "MasterSubnetsReach": {
            "Description": "Should the master have direct access to the Internet or do you prefer private subnets with NAT?",
            "Type": "String",
            "Default": "Public",
            "AllowedValues": [
                "Public",
                "Private"
            ]
        },
        "MasterELBScheme": {
            "Description": "Indicates whether the load balancer in front of the Jenkins master is internet-facing or internal.",
            "Type": "String",
            "Default": "internet-facing",
            "AllowedValues": [
                "internet-facing",
                "internal"
            ]
        },
        "MasterInstanceType": {
            "Description": "The instance type of the Jenkins master.",
            "Type": "String",
            "Default": "t2.micro"
        },
        "MasterAdminPassword": {
            "Description": "A password for the Jenkins master admin.",
            "Type": "String",
            "NoEcho": true
        },
        "MasterLogsRetentionInDays": {
            "Description": "Specifies the number of days you want to retain log events in the specified log group.",
            "Type": "Number",
            "Default": 14,
            "AllowedValues": [
                1,
                3,
                5,
                7,
                14,
                30,
                60,
                90,
                120,
                150,
                180,
                365,
                400,
                545,
                731,
                1827,
                3653
            ]
        },
        "JenkinsVersion": {
            "Description": "Jenkins version number",
            "Type": "String",
            "Default": "2.46.2",
            "ConstraintDescription": "x.y.z",
            "AllowedPattern": "[0-9]+\\.[0-9]+\\.[0-9]+"
        },
        "NewRelicLicenseKey": {
            "Description": "Optional New Relic License Key will install the New Relic Servers for Linux agent.",
            "Type": "String",
            "Default": "",
            "NoEcho": true
        }
    },
    "Mappings": {
        "RegionMap": {
            "ap-south-1": {
                "AMI": "ami-52c7b43d"
            },
            "eu-west-2": {
                "AMI": "ami-b6daced2"
            },
            "eu-west-1": {
                "AMI": "ami-01ccc867"
            },
            "ap-northeast-2": {
                "AMI": "ami-9d15c7f3"
            },
            "ap-northeast-1": {
                "AMI": "ami-923d12f5"
            },
            "sa-east-1": {
                "AMI": "ami-37cfad5b"
            },
            "ca-central-1": {
                "AMI": "ami-0bd66a6f"
            },
            "ap-southeast-1": {
                "AMI": "ami-fc5ae39f"
            },
            "ap-southeast-2": {
                "AMI": "ami-162c2575"
            },
            "eu-central-1": {
                "AMI": "ami-b968bad6"
            },
            "us-east-1": {
                "AMI": "ami-c58c1dd3"
            },
            "us-east-2": {
                "AMI": "ami-4191b524"
            },
            "us-west-1": {
                "AMI": "ami-7a85a01a"
            },
            "us-west-2": {
                "AMI": "ami-4836a428"
            }
        }
    },
    "Conditions": {
        "HasKeyName": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "KeyName"
                        },
                        ""
                    ]
                }
            ]
        },
        "HasIAMUserSSHAccess": {
            "Fn::Equals": [
                {
                    "Ref": "IAMUserSSHAccess"
                },
                "true"
            ]
        },
        "HasSSHBastionSecurityGroup": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ParentSSHBastionStack"
                        },
                        ""
                    ]
                }
            ]
        },
        "HasNotSSHBastionSecurityGroup": {
            "Fn::Equals": [
                {
                    "Ref": "ParentSSHBastionStack"
                },
                ""
            ]
        },
        "HasAuthProxySecurityGroup": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ParentAuthProxyStack"
                        },
                        ""
                    ]
                }
            ]
        },
        "HasNotAuthProxySecurityGroup": {
            "Fn::Equals": [
                {
                    "Ref": "ParentAuthProxyStack"
                },
                ""
            ]
        },
        "HasNewRelic": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "NewRelicLicenseKey"
                        },
                        ""
                    ]
                }
            ]
        },
        "HasMasterELBSchemeInternal": {
            "Fn::Equals": [
                {
                    "Ref": "MasterELBScheme"
                },
                "internal"
            ]
        },
        "HasAlertTopic": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ParentAlertStack"
                        },
                        ""
                    ]
                }
            ]
        }
    },
    "Resources": {
        "MasterStorageSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "jenkins-master",
                "VpcId": {
                    "Fn::ImportValue": {
                        "Fn::Sub": "${ParentVPCStack}-VPC"
                    }
                },
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "MasterSG"
                        },
                        "FromPort": 2049,
                        "ToPort": 2049,
                        "IpProtocol": "tcp"
                    }
                ]
            }
        },
        "PercentIOLimitTooHighAlarm": {
            "Condition": "HasAlertTopic",
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Average IO utilization over last 10 minutes higher than 80%",
                "Namespace": "AWS/EFS",
                "MetricName": "PercentIOLimit",
                "Statistic": "Average",
                "Period": 600,
                "EvaluationPeriods": 1,
                "ComparisonOperator": "GreaterThanThreshold",
                "Threshold": 80,
                "AlarmActions": [
                    {
                        "Fn::ImportValue": {
                            "Fn::Sub": "${ParentAlertStack}-TopicARN"
                        }
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "FileSystemId",
                        "Value": {
                            "Ref": "MasterStorage"
                        }
                    }
                ]
            }
        },
        "MasterStorage": {
            "Type": "AWS::EFS::FileSystem",
            "Properties": {
                "FileSystemTags": [
                    {
                        "Key": "Name",
                        "Value": "jenkins-master-storage"
                    }
                ],
                "PerformanceMode": "generalPurpose"
            }
        },
        "MasterStorageMountTargetA": {
            "Type": "AWS::EFS::MountTarget",
            "Properties": {
                "FileSystemId": {
                    "Ref": "MasterStorage"
                },
                "SecurityGroups": [
                    {
                        "Ref": "MasterStorageSG"
                    }
                ],
                "SubnetId": {
                    "Fn::ImportValue": {
                        "Fn::Sub": "${ParentVPCStack}-SubnetA${MasterSubnetsReach}"
                    }
                }
            }
        },
        "MasterStorageMountTargetB": {
            "Type": "AWS::EFS::MountTarget",
            "Properties": {
                "FileSystemId": {
                    "Ref": "MasterStorage"
                },
                "SecurityGroups": [
                    {
                        "Ref": "MasterStorageSG"
                    }
                ],
                "SubnetId": {
                    "Fn::ImportValue": {
                        "Fn::Sub": "${ParentVPCStack}-SubnetB${MasterSubnetsReach}"
                    }
                }
            }
        },
        "MasterELBSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "jenkins-elb-master",
                "VpcId": {
                    "Fn::ImportValue": {
                        "Fn::Sub": "${ParentVPCStack}-VPC"
                    }
                }
            }
        },
        "MasterELBSGInWorld": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Condition": "HasNotAuthProxySecurityGroup",
            "Properties": {
                "GroupId": {
                    "Ref": "MasterELBSG"
                },
                "IpProtocol": "tcp",
                "FromPort": 80,
                "ToPort": 80,
                "CidrIp": "0.0.0.0/0"
            }
        },
        "MasterELBSGInAuthProxy": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Condition": "HasAuthProxySecurityGroup",
            "Properties": {
                "GroupId": {
                    "Ref": "MasterELBSG"
                },
                "IpProtocol": "tcp",
                "FromPort": 80,
                "ToPort": 80,
                "SourceSecurityGroupId": {
                    "Fn::ImportValue": {
                        "Fn::Sub": "${ParentAuthProxyStack}-SecurityGroup"
                    }
                }
            }
        },
        "MasterHTTPCodeELB5XXTooHighAlarm": {
            "Condition": "HasAlertTopic",
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Application load balancer returns 5XX HTTP status codes",
                "Namespace": "AWS/ApplicationELB",
                "MetricName": "HTTPCode_ELB_5XX_Count",
                "Statistic": "Sum",
                "Period": 60,
                "EvaluationPeriods": 1,
                "ComparisonOperator": "GreaterThanThreshold",
                "Threshold": 0,
                "AlarmActions": [
                    {
                        "Fn::ImportValue": {
                            "Fn::Sub": "${ParentAlertStack}-TopicARN"
                        }
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "LoadBalancer",
                        "Value": {
                            "Fn::GetAtt": [
                                "MasterELB",
                                "LoadBalancerFullName"
                            ]
                        }
                    }
                ]
            }
        },
        "MasterHTTPCodeTarget5XXTooHighAlarm": {
            "Condition": "HasAlertTopic",
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Application load balancer receives 5XX HTTP status codes from targets",
                "Namespace": "AWS/ApplicationELB",
                "MetricName": "HTTPCode_Target_5XX_Count",
                "Statistic": "Sum",
                "Period": 60,
                "EvaluationPeriods": 1,
                "ComparisonOperator": "GreaterThanThreshold",
                "Threshold": 0,
                "AlarmActions": [
                    {
                        "Fn::ImportValue": {
                            "Fn::Sub": "${ParentAlertStack}-TopicARN"
                        }
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "LoadBalancer",
                        "Value": {
                            "Fn::GetAtt": [
                                "MasterELB",
                                "LoadBalancerFullName"
                            ]
                        }
                    }
                ]
            }
        },
        "MasterELB": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Scheme": {
                    "Ref": "MasterELBScheme"
                },
                "SecurityGroups": [
                    {
                        "Ref": "MasterELBSG"
                    }
                ],
                "Subnets": {
                    "Fn::If": [
                        "HasMasterELBSchemeInternal",
                        [
                            {
                                "Fn::ImportValue": {
                                    "Fn::Sub": "${ParentVPCStack}-SubnetAPrivate"
                                }
                            },
                            {
                                "Fn::ImportValue": {
                                    "Fn::Sub": "${ParentVPCStack}-SubnetBPrivate"
                                }
                            }
                        ],
                        [
                            {
                                "Fn::ImportValue": {
                                    "Fn::Sub": "${ParentVPCStack}-SubnetAPublic"
                                }
                            },
                            {
                                "Fn::ImportValue": {
                                    "Fn::Sub": "${ParentVPCStack}-SubnetBPublic"
                                }
                            }
                        ]
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "jenkins-master"
                    }
                ]
            }
        },
        "MasterELBTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckIntervalSeconds": 15,
                "HealthCheckPath": "/login",
                "HealthCheckPort": 8080,
                "HealthCheckProtocol": "HTTP",
                "HealthCheckTimeoutSeconds": 10,
                "HealthyThresholdCount": 2,
                "UnhealthyThresholdCount": 8,
                "Matcher": {
                    "HttpCode": 200
                },
                "Port": 8080,
                "Protocol": "HTTP",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "jenkins-master"
                    }
                ],
                "VpcId": {
                    "Fn::ImportValue": {
                        "Fn::Sub": "${ParentVPCStack}-VPC"
                    }
                }
            }
        },
        "MasterELBListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [
                    {
                        "TargetGroupArn": {
                            "Ref": "MasterELBTargetGroup"
                        },
                        "Type": "forward"
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "MasterELB"
                },
                "Port": 80,
                "Protocol": "HTTP"
            }
        },
        "MasterIP": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "MasterIAMRole"
                    }
                ]
            }
        },
        "MasterIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "logs",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents",
                                        "logs:DescribeLogStreams"
                                    ],
                                    "Resource": [
                                        "arn:aws:logs:*:*:*"
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "sts",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "sts:AssumeRole"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "MasterIAMPolicySSHAccess": {
            "Type": "AWS::IAM::Policy",
            "Condition": "HasIAMUserSSHAccess",
            "Properties": {
                "Roles": [
                    {
                        "Ref": "MasterIAMRole"
                    }
                ],
                "PolicyName": "iam",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "iam:ListUsers"
                            ],
                            "Resource": [
                                "*"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "iam:ListSSHPublicKeys",
                                "iam:GetSSHPublicKey"
                            ],
                            "Resource": [
                                {
                                    "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:user/*"
                                }
                            ]
                        }
                    ]
                }
            }
        },
        "MasterSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "jenkins-master",
                "VpcId": {
                    "Fn::ImportValue": {
                        "Fn::Sub": "${ParentVPCStack}-VPC"
                    }
                },
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "MasterELBSG"
                        },
                        "FromPort": 8080,
                        "ToPort": 8080,
                        "IpProtocol": "tcp"
                    }
                ]
            }
        },
        "MasterSGInSSHBastion": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Condition": "HasSSHBastionSecurityGroup",
            "Properties": {
                "GroupId": {
                    "Ref": "MasterSG"
                },
                "IpProtocol": "tcp",
                "FromPort": 22,
                "ToPort": 22,
                "SourceSecurityGroupId": {
                    "Fn::ImportValue": {
                        "Fn::Sub": "${ParentSSHBastionStack}-SecurityGroup"
                    }
                }
            }
        },
        "MasterSGInSSHWorld": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Condition": "HasNotSSHBastionSecurityGroup",
            "Properties": {
                "GroupId": {
                    "Ref": "MasterSG"
                },
                "IpProtocol": "tcp",
                "FromPort": 22,
                "ToPort": 22,
                "CidrIp": "0.0.0.0/0"
            }
        },
        "MasterLogs": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "RetentionInDays": {
                    "Ref": "MasterLogsRetentionInDays"
                }
            }
        },
        "MasterLC": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "default": {
                            "Fn::If": [
                                "HasNewRelic",
                                {
                                    "Fn::If": [
                                        "HasIAMUserSSHAccess",
                                        [
                                            "ssh-access",
                                            "mount",
                                            "install",
                                            "setup",
                                            "newrelic",
                                            "custom",
                                            "run"
                                        ],
                                        [
                                            "mount",
                                            "install",
                                            "setup",
                                            "newrelic",
                                            "custom",
                                            "run"
                                        ]
                                    ]
                                },
                                {
                                    "Fn::If": [
                                        "HasIAMUserSSHAccess",
                                        [
                                            "ssh-access",
                                            "mount",
                                            "install",
                                            "setup",
                                            "custom",
                                            "run"
                                        ],
                                        [
                                            "mount",
                                            "install",
                                            "setup",
                                            "custom",
                                            "run"
                                        ]
                                    ]
                                }
                            ]
                        }
                    },
                    "custom": {
                        "packages": {
                            "yum": {
                                "git": [],
                                "docker": []
                            }
                        },
                        "commands": {
                            "a_add_to_docker_group": {
                                "command": "usermod -a -G docker jenkins"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "docker": {
                                    "enabled": true,
                                    "ensureRunning": true,
                                    "packages": {
                                        "yum": [
                                            "docker"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "newrelic": {
                        "packages": {
                            "rpm": {
                                "newrelic-sysmond": "https://download.newrelic.com/pub/newrelic/el5/x86_64/newrelic-sysmond-2.3.0.132-1.x86_64.rpm"
                            }
                        },
                        "files": {
                            "/etc/newrelic/nrsysmond.cfg": {
                                "content": {
                                    "Fn::Sub": "license_key=${NewRelicLicenseKey}\nloglevel=info\nlogfile=/var/log/newrelic/nrsysmond.log\nlabels=StackName:${AWS::StackName};AccountId:${AWS::AccountId};Region:${AWS::Region}\n"
                                },
                                "mode": "000640",
                                "owner": "root",
                                "group": "newrelic"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "newrelic-sysmond": {
                                    "enabled": true,
                                    "ensureRunning": true,
                                    "files": [
                                        "/etc/newrelic/nrsysmond.cfg"
                                    ]
                                }
                            }
                        }
                    },
                    "ssh-access": {
                        "files": {
                            "/opt/authorized_keys_command.sh": {
                                "content": "#!/bin/bash -e\nif [ -z \"$1\" ]; then\n  exit 1\nfi\nSaveUserName=\"$1\"\nSaveUserName=${SaveUserName//\"+\"/\".plus.\"}\nSaveUserName=${SaveUserName//\"=\"/\".equal.\"}\nSaveUserName=${SaveUserName//\",\"/\".comma.\"}\nSaveUserName=${SaveUserName//\"@\"/\".at.\"}\naws iam list-ssh-public-keys --user-name \"$SaveUserName\" --query \"SSHPublicKeys[?Status == 'Active'].[SSHPublicKeyId]\" --output text | while read KeyId; do\n  aws iam get-ssh-public-key --user-name \"$SaveUserName\" --ssh-public-key-id \"$KeyId\" --encoding SSH --query \"SSHPublicKey.SSHPublicKeyBody\" --output text\ndone\n",
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/opt/import_users.sh": {
                                "content": "#!/bin/bash -e\naws iam list-users --query \"Users[].[UserName]\" --output text | while read User; do\n  SaveUserName=\"$User\"\n  SaveUserName=${SaveUserName//\"+\"/\".plus.\"}\n  SaveUserName=${SaveUserName//\"=\"/\".equal.\"}\n  SaveUserName=${SaveUserName//\",\"/\".comma.\"}\n  SaveUserName=${SaveUserName//\"@\"/\".at.\"}\n  if ! id -u \"$SaveUserName\" >/dev/null 2>&1; then\n    #sudo will read each file in /etc/sudoers.d, skipping file names that end in ���~��� or contain a ���.��� character to avoid causing problems with package manager or editor temporary/backup files.\n    SaveUserFileName=$(echo \"$SaveUserName\" | tr \".\" \" \")\n    /usr/sbin/useradd \"$SaveUserName\"\n    echo \"$SaveUserName ALL=(ALL) NOPASSWD:ALL\" > \"/etc/sudoers.d/$SaveUserFileName\"\n  fi\ndone\n",
                                "mode": "000755",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cron.d/import_users": {
                                "content": "*/10 * * * * root /opt/import_users.sh\n",
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "commands": {
                            "a_configure_sshd_command": {
                                "command": "sed -i \"s:#AuthorizedKeysCommand none:AuthorizedKeysCommand /opt/authorized_keys_command.sh:g\" /etc/ssh/sshd_config"
                            },
                            "b_configure_sshd_commanduser": {
                                "command": "sed -i \"s:#AuthorizedKeysCommandUser nobody:AuthorizedKeysCommandUser nobody:g\" /etc/ssh/sshd_config"
                            },
                            "c_import_users": {
                                "command": "./import_users.sh",
                                "cwd": "/opt"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "sshd": {
                                    "enabled": true,
                                    "ensureRunning": true,
                                    "commands": [
                                        "a_configure_sshd_command",
                                        "b_configure_sshd_commanduser"
                                    ]
                                }
                            }
                        }
                    },
                    "mount": {
                        "packages": {
                            "yum": {
                                "nfs-utils": []
                            }
                        },
                        "commands": {
                            "a_groupadd": {
                                "command": "groupadd -g 497 jenkins",
                                "test": "if grep -q jenkins: /etc/group; then exit 1; else exit 0; fi"
                            },
                            "b_useradd": {
                                "command": "adduser -u 498 -g 497 -s /bin/false -d /var/lib/jenkins -c 'Jenkins Continuous Integration Server' jenkins",
                                "test": "if grep -q jenkins: /etc/passwd; then exit 1; else exit 0; fi"
                            },
                            "c_mountpoint_mkdir": {
                                "command": "mkdir /var/lib/jenkins && chown -R jenkins:jenkins /var/lib/jenkins",
                                "test": "[ ! -d /var/lib/jenkins ]"
                            },
                            "d_mountpoint_mount": {
                                "command": {
                                    "Fn::Sub": "mount -t nfs4 -o vers=4.1 \"${MasterStorage}.efs.${AWS::Region}.amazonaws.com:/\" /var/lib/jenkins"
                                },
                                "test": "if mount | grep -q /var/lib/jenkins; then exit 1; else exit 0; fi"
                            }
                        }
                    },
                    "install": {
                        "packages": {
                            "rpm": {
                                "jenkins": {
                                    "Fn::Sub": "http://pkg.jenkins-ci.org/redhat-stable/jenkins-${JenkinsVersion}-1.1.noarch.rpm"
                                }
                            },
                            "yum": {
                                "awslogs": []
                            }
                        },
                        "files": {
                            "/etc/awslogs/awscli.conf": {
                                "content": {
                                    "Fn::Sub": "[default]\nregion = ${AWS::Region}\n[plugins]\ncwlogs = cwlogs\n"
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/awslogs/awslogs.conf": {
                                "content": {
                                    "Fn::Sub": "[general]\nstate_file = /var/lib/awslogs/agent-state\n[/var/log/messages]\ndatetime_format = %b %d %H:%M:%S\nfile = /var/log/messages\nlog_stream_name = {instance_id}/var/log/messages\nlog_group_name = ${MasterLogs}\n[/var/log/secure]\ndatetime_format = %b %d %H:%M:%S\nfile = /var/log/secure\nlog_stream_name = {instance_id}/var/log/secure\nlog_group_name = ${MasterLogs}\n[/var/log/cron]\ndatetime_format = %b %d %H:%M:%S\nfile = /var/log/cron\nlog_stream_name = {instance_id}/var/log/cron\nlog_group_name = ${MasterLogs}\n[/var/log/cloud-init.log]\ndatetime_format = %b %d %H:%M:%S\nfile = /var/log/cloud-init.log\nlog_stream_name = {instance_id}/var/log/cloud-init.log\nlog_group_name = ${MasterLogs}\n[/var/log/cfn-init.log]\ndatetime_format = %Y-%m-%d %H:%M:%S\nfile = /var/log/cfn-init.log\nlog_stream_name = {instance_id}/var/log/cfn-init.log\nlog_group_name = ${MasterLogs}\n[/var/log/cfn-hup.log]\ndatetime_format = %Y-%m-%d %H:%M:%S\nfile = /var/log/cfn-hup.log\nlog_stream_name = {instance_id}/var/log/cfn-hup.log\nlog_group_name = ${MasterLogs}\n[/var/log/cfn-init-cmd.log]\ndatetime_format = %Y-%m-%d %H:%M:%S\nfile = /var/log/cfn-init-cmd.log\nlog_stream_name = {instance_id}/var/log/cfn-init-cmd.log\nlog_group_name = ${MasterLogs}\n[/var/log/cloud-init-output.log]\nfile = /var/log/cloud-init-output.log\nlog_stream_name = {instance_id}/var/log/cloud-init-output.log\nlog_group_name = ${MasterLogs}\n[/var/log/dmesg]\nfile = /var/log/dmesg\nlog_stream_name = {instance_id}/var/log/dmesg\nlog_group_name = ${MasterLogs}\n[/var/log/jenkins/jenkins.log]\ndatetime_format = %d %b %Y %H:%M:%S\nmulti_line_start_pattern = {datetime_format}\nfile = /var/log/jenkins/jenkins.log\nlog_stream_name = {instance_id}/var/log/jenkins/jenkins.log\nlog_group_name = ${MasterLogs}\n"
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {
                                    "Fn::Sub": "[main]\nstack=${AWS::StackId}\nregion=${AWS::Region}\ninterval=1\n"
                                },
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {
                                    "Fn::Sub": "[cfn-auto-reloader-hook]\ntriggers=post.update\npath=Resources.MasterLC.Metadata.AWS::CloudFormation::Init\naction=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=MasterLC\nrunas=root\n"
                                }
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "awslogs": {
                                    "enabled": true,
                                    "ensureRunning": true,
                                    "packages": {
                                        "yum": [
                                            "awslogs"
                                        ]
                                    },
                                    "files": [
                                        "/etc/awslogs/awslogs.conf",
                                        "/etc/awslogs/awscli.conf"
                                    ]
                                },
                                "cfn-hup": {
                                    "enabled": true,
                                    "ensureRunning": true,
                                    "files": [
                                        "/etc/cfn/cfn-hup.conf",
                                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                                    ]
                                }
                            }
                        }
                    },
                    "setup": {
                        "files": {
                            "/root/plugins.txt": {
                                "content": "jqs-monitoring\nant\nbuild-timeout\ndocker-workflow\ncredentials-binding\nemail-ext\nenvinject\ngithub-organization-folder\ngradle\nworkflow-aggregator\npipeline-maven\nssh-slaves\nsubversion\ntimestamper\nws-cleanup\n",
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "commands": {
                            "a_start_jenkins": {
                                "command": "service jenkins start",
                                "test": "[ ! -f /var/lib/jenkins/setup_done.txt ]"
                            },
                            "b_await_jenkins": {
                                "command": "until $(curl -s -m 60 -o /dev/null -I -f -u \"admin:$(cat /var/lib/jenkins/secrets/initialAdminPassword)\" http://localhost:8080/cli/); do printf \".\"; sleep 1; done",
                                "test": "[ ! -f /var/lib/jenkins/setup_done.txt ]"
                            },
                            "c_activate_slave_agent_port": {
                                "command": "sed -i -e \"s@<slaveAgentPort>.*</slaveAgentPort>@<slaveAgentPort>49817</slaveAgentPort>@\" /var/lib/jenkins/config.xml",
                                "test": "[ ! -f /var/lib/jenkins/setup_done.txt ]"
                            },
                            "d_restart_jenkins": {
                                "command": "service jenkins restart",
                                "test": "[ ! -f /var/lib/jenkins/setup_done.txt ]"
                            },
                            "e_await_jenkins": {
                                "command": "until $(curl -s -m 60 -o /dev/null -I -f -u \"admin:$(cat /var/lib/jenkins/secrets/initialAdminPassword)\" http://localhost:8080/cli/); do printf \".\"; sleep 1; done",
                                "test": "[ ! -f /var/lib/jenkins/setup_done.txt ]"
                            },
                            "f_install_plugins": {
                                "command": "while read -r plugin; do java -jar /var/cache/jenkins/war/WEB-INF/jenkins-cli.jar -s \"http://localhost:8080/\" -auth \"admin:$(cat /var/lib/jenkins/secrets/initialAdminPassword)\" install-plugin \"$plugin\"; done < /root/plugins.txt",
                                "test": "[ ! -f /var/lib/jenkins/setup_done.txt ]"
                            },
                            "g_restart_jenkins": {
                                "command": "service jenkins restart",
                                "test": "[ ! -f /var/lib/jenkins/setup_done.txt ]"
                            },
                            "h_await_jenkins": {
                                "command": "until $(curl -s -m 60 -o /dev/null -I -f -u \"admin:$(cat /var/lib/jenkins/secrets/initialAdminPassword)\" http://localhost:8080/cli/); do printf \".\"; sleep 1; done",
                                "test": "[ ! -f /var/lib/jenkins/setup_done.txt ]"
                            },
                            "i_set_admin_password": {
                                "command": {
                                    "Fn::Sub": "echo 'jenkins.model.Jenkins.instance.securityRealm.createAccount(\"admin\", \"${MasterAdminPassword}\")' | java -jar /var/cache/jenkins/war/WEB-INF/jenkins-cli.jar -s \"http://localhost:8080/\" -auth \"admin:$(cat /var/lib/jenkins/secrets/initialAdminPassword)\" groovy ="
                                },
                                "test": "[ ! -f /var/lib/jenkins/setup_done.txt ]"
                            },
                            "j_stop_jenkins": {
                                "command": "service jenkins stop",
                                "test": "[ ! -f /var/lib/jenkins/setup_done.txt ]"
                            },
                            "z_create_setup_done_file": {
                                "command": "echo \"Setup done. Don not delete this file.\" > /var/lib/jenkins/setup_done.txt",
                                "test": "[ ! -f /var/lib/jenkins/setup_done.txt ]"
                            }
                        }
                    },
                    "run": {
                        "services": {
                            "sysvinit": {
                                "jenkins": {
                                    "enabled": true,
                                    "ensureRunning": true,
                                    "packages": {
                                        "rpm": [
                                            "jenkins"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "MasterIP"
                },
                "InstanceType": {
                    "Ref": "MasterInstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "MasterSG"
                    }
                ],
                "KeyName": {
                    "Fn::If": [
                        "HasKeyName",
                        {
                            "Ref": "KeyName"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Sub": "#!/bin/bash -x\n/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource MasterLC --region ${AWS::Region}\n/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource MasterASG --region ${AWS::Region}\n"
                    }
                }
            }
        },
        "MasterASG": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "DependsOn": [
                "MasterStorageMountTargetA",
                "MasterStorageMountTargetB"
            ],
            "Properties": {
                "LaunchConfigurationName": {
                    "Ref": "MasterLC"
                },
                "MinSize": 1,
                "MaxSize": 1,
                "DesiredCapacity": 1,
                "HealthCheckGracePeriod": 900,
                "HealthCheckType": "ELB",
                "VPCZoneIdentifier": [
                    {
                        "Fn::ImportValue": {
                            "Fn::Sub": "${ParentVPCStack}-SubnetA${MasterSubnetsReach}"
                        }
                    },
                    {
                        "Fn::ImportValue": {
                            "Fn::Sub": "${ParentVPCStack}-SubnetB${MasterSubnetsReach}"
                        }
                    }
                ],
                "TargetGroupARNs": [
                    {
                        "Ref": "MasterELBTargetGroup"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "jenkins-master",
                        "PropagateAtLaunch": true
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT15M"
                }
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "PauseTime": "PT15M",
                    "WaitOnResourceSignals": true
                }
            }
        }
    },
    "Outputs": {
        "TemplateID": {
            "Description": "cloudonaut.io template id",
            "Value": "jenkins/jenkins2-ha"
        },
        "AdminUsername": {
            "Description": "User name for the Jenkins admin.",
            "Value": "admin",
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-AdminUsername"
                }
            }
        },
        "DNSName": {
            "Description": "The DNS name for the Jenkins Master load balancer.",
            "Value": {
                "Fn::GetAtt": [
                    "MasterELB",
                    "DNSName"
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-DNSName"
                }
            }
        },
        "URL": {
            "Description": "URL to the Jenkins Master.",
            "Value": {
                "Fn::Sub": "http://${MasterELB.DNSName}"
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-URL"
                }
            }
        }
    }
}